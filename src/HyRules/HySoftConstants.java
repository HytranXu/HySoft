/* Generated By:JJTree&JavaCC: Do not edit this line. HySoftConstants.java */
package HyRules;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HySoftConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int DEBUG = 13;
  /** RegularExpression Id. */
  int SHOW = 14;
  /** RegularExpression Id. */
  int RESTART = 15;
  /** RegularExpression Id. */
  int HYEOF = 16;
  /** RegularExpression Id. */
  int SET = 17;
  /** RegularExpression Id. */
  int BOOLEAN = 18;
  /** RegularExpression Id. */
  int DOUBLE = 19;
  /** RegularExpression Id. */
  int INT = 20;
  /** RegularExpression Id. */
  int CHAR = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int VOID = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int THIS = 26;
  /** RegularExpression Id. */
  int MAP = 27;
  /** RegularExpression Id. */
  int VECTOR = 28;
  /** RegularExpression Id. */
  int NULL = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int FOR = 32;
  /** RegularExpression Id. */
  int OF = 33;
  /** RegularExpression Id. */
  int NOTIN = 34;
  /** RegularExpression Id. */
  int IN = 35;
  /** RegularExpression Id. */
  int WHILE = 36;
  /** RegularExpression Id. */
  int BREAK = 37;
  /** RegularExpression Id. */
  int CONTINUE = 38;
  /** RegularExpression Id. */
  int RETURN = 39;
  /** RegularExpression Id. */
  int RETURNTOC = 40;
  /** RegularExpression Id. */
  int LIBRARY = 41;
  /** RegularExpression Id. */
  int DATA = 42;
  /** RegularExpression Id. */
  int FUNC = 43;
  /** RegularExpression Id. */
  int INCLUDE = 44;
  /** RegularExpression Id. */
  int LOAD = 45;
  /** RegularExpression Id. */
  int END = 46;
  /** RegularExpression Id. */
  int LPAREN = 47;
  /** RegularExpression Id. */
  int RPAREN = 48;
  /** RegularExpression Id. */
  int LBRACE = 49;
  /** RegularExpression Id. */
  int RBRACE = 50;
  /** RegularExpression Id. */
  int LBRACKET = 51;
  /** RegularExpression Id. */
  int RBRACKET = 52;
  /** RegularExpression Id. */
  int SEMICOLON = 53;
  /** RegularExpression Id. */
  int COMMA = 54;
  /** RegularExpression Id. */
  int DOT = 55;
  /** RegularExpression Id. */
  int ASSIGN = 56;
  /** RegularExpression Id. */
  int GT = 57;
  /** RegularExpression Id. */
  int LT = 58;
  /** RegularExpression Id. */
  int BANG = 59;
  /** RegularExpression Id. */
  int EQ = 60;
  /** RegularExpression Id. */
  int LE = 61;
  /** RegularExpression Id. */
  int GE = 62;
  /** RegularExpression Id. */
  int NE = 63;
  /** RegularExpression Id. */
  int SC_OR = 64;
  /** RegularExpression Id. */
  int SC_AND = 65;
  /** RegularExpression Id. */
  int INCR = 66;
  /** RegularExpression Id. */
  int DECR = 67;
  /** RegularExpression Id. */
  int PLUS = 68;
  /** RegularExpression Id. */
  int MINUS = 69;
  /** RegularExpression Id. */
  int STAR = 70;
  /** RegularExpression Id. */
  int SLASH = 71;
  /** RegularExpression Id. */
  int REM = 72;
  /** RegularExpression Id. */
  int PLUSASSIGN = 73;
  /** RegularExpression Id. */
  int MINUSASSIGN = 74;
  /** RegularExpression Id. */
  int STARASSIGN = 75;
  /** RegularExpression Id. */
  int SLASHASSIGN = 76;
  /** RegularExpression Id. */
  int REMASSIGN = 77;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 78;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 79;
  /** RegularExpression Id. */
  int HEX_LITERAL = 80;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 81;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 82;
  /** RegularExpression Id. */
  int EXPONENT = 83;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 84;
  /** RegularExpression Id. */
  int STRING_LITERAL = 85;
  /** RegularExpression Id. */
  int IDENTIFIER = 86;
  /** RegularExpression Id. */
  int LETTER = 87;
  /** RegularExpression Id. */
  int DIGIT = 88;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"//\"",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"hy_debug\"",
    "\"hy_show\"",
    "\"hy_restart\"",
    "\"hy_end\"",
    "\"hy_set\"",
    "<BOOLEAN>",
    "\"double\"",
    "\"int\"",
    "\"char\"",
    "\"true\"",
    "\"false\"",
    "\"void\"",
    "\"string\"",
    "\"this\"",
    "\"map\"",
    "\"vector\"",
    "\"null\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"of\"",
    "\"!in\"",
    "\"in\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"toClient:\"",
    "\"lib\"",
    "\"data\"",
    "\"funlib\"",
    "\"include\"",
    "\"load\"",
    "\"end\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "<DECIMAL_LITERAL>",
    "<INTEGER_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
