/* HySoft.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. HySoft.java */
package HyRules;

import java.lang.StringBuilder;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Stack;

public class HySoft/*@bgen(jjtree)*/implements HySoftTreeConstants, HySoftConstants {/*@bgen(jjtree)*/
  protected JJTHySoftState jjtree = new JJTHySoftState();//debug状态下一些调试命令字可以生效
        private boolean bDebug = false;
        //是否最后输出语法树
        private boolean bShowTreeAtEnd = false;
        //是否展示定义的属性
        private boolean bShowMembers = false;
        //是否显示符号表
        private boolean bShowSystab = false;
        /*
	 * true时编译状态只编译然后保存定义到库中
	 * false编译完后不保存到库而是直接运行
	 */
        private boolean bCompile = false;
        private boolean bRunAfterC = false;
        /*
	 * true时重复执行Compile活动
	 * false只执行一遍就等<EOF> | HYEOF结束
	 * 无论true还是false在一次完成后遇到<EOF>都将结束
	 */
        private boolean bContinue = false;

        //收到hy_restart后将从这里开始读
        public InputStream streamIn = null;
        //compile运行一次后如果streamIn 和 sUsedNow不同将重新初始化
        private InputStream sUsedNow = null;
        private boolean bforceRestart = false;

        //全局数据表//当前处理数据表需要在libary、Loaddeclare中声明并设置，本地符号表
        private DataTAB g_Systab = null;
        //工作栈
        private Stack<Object> sysStack = new Stack<Object>();
        //当前处理数据表需要在funcDefine中声明并设置，本地符号表
        protected DataTAB func_Systab = null;
        //当前处理数据表需要在functionDefine中声明并设置，本地符号表
        protected DataTAB function_Systab = null;
        //日志组件
        private LogOrShow logshow = new LogOrShow();
        //全局数据表
        private DataTAB g_DataDefine = null;
        private FuncInfor funDefineInfor = null;
        private FunctionLib liborLoadFundef = null;

        //去除读取字符串的"
        private String trimeDQM(String strInfor)
        {
                if(strInfor.startsWith("\u005c""))
                        strInfor = strInfor.substring(1);
                if(strInfor.endsWith("\u005c""))
                        strInfor = strInfor.substring(0,strInfor.length()-1);
                return strInfor;
        }
        private String trimeQM(String strInfor)
        {
                if(strInfor.startsWith("\u005c'"))
                        strInfor = strInfor.substring(1);
                if(strInfor.endsWith("\u005c'"))
                        strInfor = strInfor.substring(0,strInfor.length()-1);
                return strInfor;
        }

        public boolean getShowTab()
        {
                return this.bShowSystab;
        }
        //主函数
        public static void main(String[] args) throws ParseException, TokenMgrError
        {
                //help信息
                System.out.println("HyRule 0.1:  Usage :");
                System.out.println("java HyRule rulefile.ru");
                System.out.println("java HyRule system input will be used.");

                //日志设置
                LogOrShow.setInfoLevel(InforType.Error);
                LogOrShow.setbWriteLog(true);
                LogOrShow.setStrFileName("./log.txt");
                LogOrShow.setMaxLogLength(100);

                //根据参数初始化对象
                HySoft ruParser;
        if(args.length == 1)
        {
                System.out.println("Hy-Rule 0.1:  Reading from file " + args[0] + " . . .");
                try
                {
                        InputStream stIn = new FileInputStream(args[0]);
                        ruParser = new HySoft(stIn);
                        ruParser.sUsedNow = stIn;
                }
                catch(FileNotFoundException e)
                {
                        System.out.println("Hy-Rule 0.1:  File " + args[0] + " not found.");
                        return;
                }
                }
                else
                {
                        ruParser = new HySoft(System.in);
                        ruParser.sUsedNow = System.in;
                        System.out.println("\u005cnPlease input your HyRule grammar\u005cn");
        }

        //开始运行
        ruParser.logshow.ShowTime(InforType.Warn);

        //编译
        boolean bRun = false;
        do
        {
                //判断是否需要重新初始化，没有重启才判断同一流读新文件
                if(bRun && (null != ruParser.streamIn && ruParser.sUsedNow != ruParser.streamIn))
                        ruParser.ReInit(ruParser.streamIn);
                else if(bRun && ruParser.bforceRestart)
                        ruParser.jjtree.reset();

                //强制重新初始话只有启动编译后设置生效，生效一次
                ruParser.bforceRestart = false;
                ruParser.Compile();

                //已经运行
                bRun = true;

                //如果是运行状态开始运行
                if(!ruParser.bCompile && ruParser.bRunAfterC)
                 ((SimpleNode)ruParser.jjtree.rootNode()).interpret(InterpreType.Run);

                //在调试状态下打开最后显示语法树时进行展示
        if(ruParser.bShowTreeAtEnd && ruParser.bDebug)
        {
                System.out.println("\u005cn!<----------Begin dump hyrule tree--------->!");
                ((SimpleNode)ruParser.jjtree.rootNode()).dump("");
        }

        //在调试状态下打开最后显示属性时进行展示
        if(ruParser.bShowMembers && ruParser.bDebug)
        {
                System.out.println("\u005cn!<----------Begin dump hyrule member--------->!");
                ((SimpleNode)ruParser.jjtree.rootNode()).dumpMember("");
        }

                        System.out.println("\u005cnMain continue flag is " + ruParser.bContinue + ", once again flag is " + ruParser.bforceRestart);
        }
        while(ruParser.bContinue || ruParser.bforceRestart);

        /*
    	 * true时编译状态只编译然后保存定义到库中
    	 * false编译完后不保存到库而是直接运行
    	 */
        if(ruParser.bCompile)
        {
                // TODO save功能
        }
        }

/*---------------------------------------*/
//语法规范定义部分
/*---------------------------------------*/
/* Compile 启动主函数 
 * 在编辑状态定义的数据和规则将进行保留，后期如果需要可以通过load加载
 * 运行状态添加的数据和规则定义是临时的，运行结束将被删除，不能通过load加载
 * */
  final public void Compile() throws ParseException {/*@bgen(jjtree) Compile */
        ASTCompile jjtn000 = new ASTCompile(JJTCOMPILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));//是否编辑状态还是运行状态，true编辑状态
        Boolean bCompleFlag = new Boolean(true);
        jjtn000.setLogShow(logshow);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
bContinue = false;
                        System.out.println("\u005cnEOF Continue flag is " + bContinue);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DEBUG:
          case SHOW:
          case SET:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DEBUG:{
            DebugStatement();
            break;
            }
          case SHOW:{
            ShowStatement();
            break;
            }
          case SET:{
            SetStatement();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIBRARY:{
          LibraryDeclare(bCompleFlag);
jjtn000.bCompile = true;
                                bCompile = true;
          break;
          }
        case LOAD:{
          LoadDeclare(bCompleFlag);
jjtn000.bCompile = false;
                                bCompile = false;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          error_skipto(SEMICOLON,EOF,"HyRule not matched occured: ");
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESTART:
        case SET:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RESTART:{
            RestartStatement();
            break;
            }
          case SET:{
            SetStatement();
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HYEOF:{
          jj_consume_token(HYEOF);
          jj_consume_token(SEMICOLON);
          break;
          }
        case 0:{
          jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
bContinue = false;
                                        System.out.println("\u005cnEOF Continue flag is " + bContinue);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//设置语法
/*---------------------------------------*/
//Restart命令语法
  final public void RestartStatement() throws ParseException {Token start;
    jj_consume_token(RESTART);
    start = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
if(start.image.equalsIgnoreCase("on"))
                {
                        bContinue = true;
                        System.out.println("\u005cnRestart to continue flag is " + bContinue);
                }
                else if(start.image.equalsIgnoreCase("off"))
                {
                        bContinue = false;
                        System.out.println("\u005cnRestart to continue flag is " + bContinue);
                }
                else if(start.image.equalsIgnoreCase("conew"))
                {
                        bforceRestart = true;
                        System.out.println("\u005cnRestart to continue a new one once flag is " + bforceRestart);
                }
  }

//Set命令语法
  final public void SetStatement() throws ParseException {Token opt, choice;
    jj_consume_token(SET);
    opt = jj_consume_token(IDENTIFIER);
    choice = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
if(opt.image.equalsIgnoreCase("log"))
                {
                        if(choice.image.equalsIgnoreCase("on"))
                        {
                                LogOrShow.setbWriteLog(true);
                                System.out.println("\u005cnHyRule starts to write log!");
                        }
                        else if(choice.image.equalsIgnoreCase("off"))
                        {
                                LogOrShow.setbWriteLog(false);
                                System.out.println("\u005cnHyRule stops to write log!");
                        }
                        else
                                System.out.println("\u005cnHy_set log wrong : " + choice.image);
                }
                else if(opt.image.equalsIgnoreCase("loglv"))
                {
                        if(choice.image.equalsIgnoreCase("debug"))
                        {
                                LogOrShow.setInfoLevel(InforType.Debug);
                                System.out.println("\u005cnHyRule sets log level to debug!");
                        }
                        else if(choice.image.equalsIgnoreCase("infor"))
                        {
                                LogOrShow.setInfoLevel(InforType.Infor);
                                System.out.println("\u005cnHyRule sets log level to infor!");
                        }
                        else if(choice.image.equalsIgnoreCase("warn"))
                        {
                                LogOrShow.setInfoLevel(InforType.Warn);
                                System.out.println("\u005cnHyRule sets log level to warn!");
                        }
                        else if(choice.image.equalsIgnoreCase("erro"))
                        {
                                LogOrShow.setInfoLevel(InforType.Error);
                                System.out.println("\u005cnHyRule sets log level to erro!");
                        }
                        else
                                System.out.println("\u005cnHy_set loglv wrong : " + choice.image);
                }
  }

/*---------------------------------------*/
//调试语法
/*---------------------------------------*/
//debug语法
  final public void DebugStatement() throws ParseException {Token debugT;
    jj_consume_token(DEBUG);
    debugT = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
if(debugT.image.equalsIgnoreCase("on"))
                {
                        bDebug = true;
                        LogOrShow.setDebug(true);
                        HyRuleNode.setDebug(true);
                        System.out.println("\u005cnHyRule debug state on!");
                }
                else if(debugT.image.equalsIgnoreCase("off"))
                {
                        bDebug = false;
                        LogOrShow.setDebug(false);
                        HyRuleNode.setDebug(false);
                        System.out.println("\u005cnHyRule debug state off!");
                }
                else if(debugT.image.equalsIgnoreCase("runon"))
                {
                        bRunAfterC = true;
                        System.out.println("\u005cnHyRule run state on!");
                }
                else if(debugT.image.equalsIgnoreCase("runoff"))
                {
                        bRunAfterC = false;
                        System.out.println("\u005cnHyRule run state off!");
                }
  }

//show语法
  final public void ShowStatement() throws ParseException {Token debugT;
    jj_consume_token(SHOW);
    debugT = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
if(debugT.image.equalsIgnoreCase("debug"))
                        System.out.println("\u005cnHyRule debug flag is " + bDebug);
                else if(debugT.image.equalsIgnoreCase("ends") && bDebug)
                {
                        this.bShowTreeAtEnd = true;
                        System.out.println("\u005cnHyRule show AST at end on!");
                }
                else if(debugT.image.equalsIgnoreCase("endo"))
                {
                        System.out.println("\u005cnHyRule show AST at end off!");
                        this.bShowTreeAtEnd = false;
                }
                else if(debugT.image.equalsIgnoreCase("mems"))
                {
                        System.out.println("\u005cnHyRule show members on!");
                        this.bShowMembers = true;
                }
                else if(debugT.image.equalsIgnoreCase("memo"))
                {
                        System.out.println("\u005cnHyRule show members off!");
                        this.bShowMembers = false;
                }
                else if(debugT.image.equalsIgnoreCase("tabs"))
                {
                        System.out.println("\u005cnHyRule show systab on!");
                        this.bShowSystab = true;
                }
                else if(debugT.image.equalsIgnoreCase("tabo"))
                {
                        System.out.println("\u005cnHyRule show systab off!");
                        this.bShowSystab = false;
                }
                else
                        System.out.println("\u005cnHyRule state or parameter for hy_show wrong!");
  }

//定义编辑定义
  final public void LibraryDeclare(Boolean bComple) throws ParseException {/*@bgen(jjtree) LibraryDeclare */
        ASTLibraryDeclare jjtn000 = new ASTLibraryDeclare(JJTLIBRARYDECLARE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token ID;
        bComple = true;
        String strInclude = new String();
        jjtn000.setParser(this);
        jjtn000.setLogShow(logshow);

        DataTAB[] result = jjtn000.IniTabAndStackForLoadOrLib(this.sysStack,"LibDeclare");
        g_DataDefine = result[1];
        g_Systab = result[0];

        this.liborLoadFundef = jjtn000.IniLib();
    try {
      jj_consume_token(LIBRARY);
      ID = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
jjtn000.setStrLibraryName(ID.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCLUDE:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        strInclude = IncludeDeclare();
jjtn000.AddInclude(strInclude);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case SHOW:
        case SET:
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case STRING:
        case VECTOR:
        case DATA:
        case FUNC:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case STRING:
        case VECTOR:
        case IDENTIFIER:{
          VarDeclaration(bComple);
          break;
          }
        case DATA:
        case FUNC:{
          FuncState(bComple);
          break;
          }
        case DEBUG:{
          DebugStatement();
          break;
          }
        case SHOW:{
          ShowStatement();
          break;
          }
        case SET:{
          SetStatement();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case SHOW:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:{
          DebugStatement();
          break;
          }
        case SHOW:{
          ShowStatement();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
g_Systab = null;
                liborLoadFundef = null;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//运行态定义
  final public void LoadDeclare(Boolean bComple) throws ParseException {/*@bgen(jjtree) LoadDeclare */
        ASTLoadDeclare jjtn000 = new ASTLoadDeclare(JJTLOADDECLARE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String libs = new String();
        bComple = false;
        jjtn000.setParser(this);
        jjtn000.setLogShow(logshow);
        DataTAB[] result = jjtn000.IniTabAndStackForLoadOrLib(this.sysStack,"LoadDeclare");
        g_DataDefine = result[1];
        g_Systab = result[0];

        liborLoadFundef = jjtn000.IniLib();
    try {
      jj_consume_token(LOAD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        libs = LibNames();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
if(!libs.isEmpty())
                                jjtn000.setStrLibrays(libs);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case SHOW:
        case SET:
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case TRUE:
        case FALSE:
        case STRING:
        case THIS:
        case VECTOR:
        case IF:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case DATA:
        case FUNC:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DATA:
        case FUNC:{
          FuncState(bComple);
          break;
          }
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case TRUE:
        case FALSE:
        case STRING:
        case THIS:
        case VECTOR:
        case IF:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          Statement(bComple);
          break;
          }
        case DEBUG:{
          DebugStatement();
          break;
          }
        case SHOW:{
          ShowStatement();
          break;
          }
        case SET:{
          SetStatement();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RETURNTOC:{
        Return2Client();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case END:{
        jj_consume_token(END);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case SHOW:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:{
          DebugStatement();
          break;
          }
        case SHOW:{
          ShowStatement();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
g_Systab = null;
                liborLoadFundef = null;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//规则包含其他规则语法
  final public String IncludeDeclare() throws ParseException {Token id = null;
    jj_consume_token(INCLUDE);
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
{if ("" != null) return id.image;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//定义名字
  final public String Name() throws ParseException {Token nameID,mID;
        StringBuilder nameBuild = new StringBuilder();
    nameID = jj_consume_token(IDENTIFIER);
nameBuild.append(nameID.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      jj_consume_token(DOT);
      mID = jj_consume_token(IDENTIFIER);
nameBuild.append(".");
                                nameBuild.append(mID.image);
    }
{if ("" != null) return nameBuild.toString();}
    throw new Error("Missing return statement in function");
  }

//定义名字
  final public String LibNames() throws ParseException {Token libN = null, libOtherN = null;
        StringBuilder nameBuild = new StringBuilder();
    libN = jj_consume_token(IDENTIFIER);
nameBuild.append(libN.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      libOtherN = jj_consume_token(IDENTIFIER);
nameBuild.append(",");
                        nameBuild.append(libOtherN.image);
    }
{if ("" != null) return nameBuild.toString();}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//定义变量声明语法
//仅为变量lookahead使用
  final public void VarDeclLookAhead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Name();
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case VECTOR:{
      jj_consume_token(VECTOR);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

/*
 * 变量声明包括赋值
 * char数组本质就是string，所以不在定义char []
 */
  final public void VarDeclaration(boolean bComple) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      IntVar();
      break;
      }
    case BOOLEAN:{
      BoolVar();
      break;
      }
    case CHAR:{
      CharVar();
      break;
      }
    case DOUBLE:{
      DoubleVar();
      break;
      }
    case STRING:{
      StringVar();
      break;
      }
    case IDENTIFIER:{
      ObjectVar();
      break;
      }
    case VECTOR:{
      VecVar();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//数组声明
  final public String ArrayStatement() throws ParseException {Token name;
        StringBuilder nB = new StringBuilder();
    jj_consume_token(LBRACKET);
    name = jj_consume_token(DECIMAL_LITERAL);
    jj_consume_token(RBRACKET);
nB.append(name.image);
                {if ("" != null) return nB.toString();}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//vector变量定义
  final public void VecVar() throws ParseException {/*@bgen(jjtree) VecVar */
        ASTVecVar jjtn000 = new ASTVecVar(JJTVECVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token intName;
        StringBuilder infBuilder = null;
        String strVec = "";

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(VECTOR);
      //vec数组
              intName = jj_consume_token(IDENTIFIER);
      strVec = VecDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(intName.image);
                infBuilder.append(strVec);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),"");
                jjtn000.addToVarName(infBuilder.toString(),true);
                intName = null;
                strVec = "";
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        intName = jj_consume_token(IDENTIFIER);
        strVec = VecDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(intName.image);
                        infBuilder.append(strVec);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),"");
                        jjtn000.addToVarName(infBuilder.toString(),true);
                        intName = null;
                        strVec = "";
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//vec 声明体
  final public String VecDeclare() throws ParseException {String strVec = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      if (jj_2_1(2147483647)) {
        CallFuncStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ConditionalExpression();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
strVec = new String();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
{if ("" != null) return strVec;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//int变量定义
  final public void IntVar() throws ParseException {/*@bgen(jjtree) IntVar */
        ASTIntVar jjtn000 = new ASTIntVar(JJTINTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token intName;

        //[0]数组信息 [1]赋值信息
        String ArrayInfor[];
        StringBuilder infBuilder = null;

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(INT);
      //int数组
              intName = jj_consume_token(IDENTIFIER);
      ArrayInfor = IntDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(intName.image);
                if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                        infBuilder.append(ArrayInfor[0]);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                if(ArrayInfor[2].equalsIgnoreCase("true"))
                        jjtn000.addToVarName(infBuilder.toString(),true);
                else
                        jjtn000.addToVarName(infBuilder.toString(),false);
                intName = null;
                ArrayInfor = null;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        intName = jj_consume_token(IDENTIFIER);
        ArrayInfor = IntDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(intName.image);
                        if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                                infBuilder.append(ArrayInfor[0]);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                        if(ArrayInfor[2].equalsIgnoreCase("true"))
                                jjtn000.addToVarName(infBuilder.toString(),true);
                        else
                                jjtn000.addToVarName(infBuilder.toString(),false);
                        ArrayInfor = null;
                        intName = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//int 声明体
//[0]数组信息 [1]赋值信息 [3]是否需要后续计算
  final public String[] IntDeclare() throws ParseException {//数组下表
        String arrIndex = new String(),arrIndexEx = new String();
        //赋值
        String strValue = null;
        Token Value = null;
        StringBuilder ValueBuilder = null;
        StringBuilder arrindexb = null;
        boolean bWaitForCalculate = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      arrIndex = ArrayStatement();
//数组下标
                                arrindexb = new StringBuilder();
                                if(arrIndex != null && !arrIndex.isEmpty())
                                {
                                        arrindexb.append(",");
                                        arrindexb.append(arrIndex);
                                }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_11;
        }
        arrIndexEx = ArrayStatement();
if(arrindexb != null && !arrIndex.isEmpty())
                                        {
                                                arrindexb.append(",");
                                                arrindexb.append(arrIndexEx);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ValueBuilder = new StringBuilder();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          if (jj_2_2(2147483647)) {
            strValue = CallFuncStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
ValueBuilder.append(strValue);
                                                bWaitForCalculate = true;
                                                strValue = null;
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DECIMAL_LITERAL:{
            Value = jj_consume_token(DECIMAL_LITERAL);
            break;
            }
          case INTEGER_LITERAL:{
            Value = jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
ValueBuilder.append(Value.image);
                                                        Value = null;
                                                        bWaitForCalculate = false;
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              break label_12;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DECIMAL_LITERAL:{
              Value = jj_consume_token(DECIMAL_LITERAL);
              break;
              }
            case INTEGER_LITERAL:{
              Value = jj_consume_token(INTEGER_LITERAL);
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
if(Value.image != null && !Value.image.isEmpty())
                                                                {
                                                                        ValueBuilder.append(",");
                                                                        ValueBuilder.append(Value.image);
                                                                }
                                                                Value = null;
          }
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_3(2147483647)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DECIMAL_LITERAL:{
            Value = jj_consume_token(DECIMAL_LITERAL);
            break;
            }
          case INTEGER_LITERAL:{
            Value = jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_4(2147483647)) {
          strValue = CallFuncStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
ValueBuilder = new StringBuilder();
                        if(Value != null)
                        {
                                bWaitForCalculate = false;
                                ValueBuilder.append(Value.image);
                                Value = null;
                        }
                        else if(null != strValue)
                        {
                                ValueBuilder.append(strValue);
                                bWaitForCalculate = true;
                                strValue = null;
                        }
    }
String[] infor = new String[3];
                if(null != arrindexb)
                        infor[0] = arrindexb.toString();
                else
                        infor[0] = new String();

                //数组赋值
                if(ValueBuilder != null)
                        infor[1] = ValueBuilder.toString();
                else
                        infor[1] = new String();

                infor[2] = Boolean.toString(bWaitForCalculate);

                {if ("" != null) return infor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
/*
 * char变量定义
 * 由于存在string所以不在定义char数组
 */
  final public void CharVar() throws ParseException {/*@bgen(jjtree) CharVar */
        ASTCharVar jjtn000 = new ASTCharVar(JJTCHARVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token charName = null,charValue = null;
        String strValue = null;

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(CHAR);
      charName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_5(2147483647)) {
          strValue = CallFuncStatement();
        } else if (jj_2_6(2147483647)) {
          charValue = jj_consume_token(CHARACTER_LITERAL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
//添加到节点
                if(charValue != null)
                {
                        jjtn000.AddIntItem(charName.image,trimeQM(charValue.image));
                        jjtn000.addToVarName(charName.image,false);
                        charValue = null;
                }
                else if(null != strValue)
                {
                        jjtn000.AddIntItem(charName.image,strValue);
                        strValue = new String();
                        jjtn000.addToVarName(charName.image,true);
                        strValue = null;
                }
                else
                        jjtn000.addToVarName(charName.image,false);
                charName = null;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        charName = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          if (jj_2_7(2147483647)) {
            strValue = CallFuncStatement();
          } else if (jj_2_8(2147483647)) {
            charValue = jj_consume_token(CHARACTER_LITERAL);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
        }
//添加到节点
                        if(charValue != null)
                        {
                                jjtn000.AddIntItem(charName.image,trimeQM(charValue.image));
                                jjtn000.addToVarName(charName.image,false);
                                charValue = null;
                        }
                        else if(null != strValue)
                        {
                                jjtn000.AddIntItem(charName.image,strValue);
                                strValue = new String();
                                jjtn000.addToVarName(charName.image,true);
                                strValue = null;
                        }
                        else
                                jjtn000.addToVarName(charName.image,false);
                        charName = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//bool变量定义
  final public void BoolVar() throws ParseException {/*@bgen(jjtree) BoolVar */
        ASTBoolVar jjtn000 = new ASTBoolVar(JJTBOOLVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token bName;

        //[0]数组信息 [1]赋值信息
        String ArrayInfor[];
        StringBuilder infBuilder = null;

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(BOOLEAN);
      //bool数组
              bName = jj_consume_token(IDENTIFIER);
      ArrayInfor = BoolDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(bName.image);
                if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                        infBuilder.append(ArrayInfor[0]);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                if(ArrayInfor[2].equalsIgnoreCase("true"))
                        jjtn000.addToVarName(infBuilder.toString(),true);
                else
                        jjtn000.addToVarName(infBuilder.toString(),false);
                bName = null;
                ArrayInfor = null;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        bName = jj_consume_token(IDENTIFIER);
        ArrayInfor = BoolDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(bName.image);
                        if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                                infBuilder.append(ArrayInfor[0]);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                        if(ArrayInfor[2].equalsIgnoreCase("true"))
                                jjtn000.addToVarName(infBuilder.toString(),true);
                        else
                                jjtn000.addToVarName(infBuilder.toString(),false);
                        ArrayInfor = null;
                        bName = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//bool 声明体
//[0]数组信息 [1]赋值信息 [3]是否需要后续计算
  final public String[] BoolDeclare() throws ParseException {//数组下表
        String arrIndex = new String(),arrIndexEx = new String();
        //赋值
        String strValue = null;
        Token Value = null;
        StringBuilder ValueBuilder = null;
        StringBuilder arrindexb = null;
        boolean bWaitForCalculate = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      arrIndex = ArrayStatement();
//数组下标
                                arrindexb = new StringBuilder();
                                if(arrIndex != null && !arrIndex.isEmpty())
                                {
                                        arrindexb.append(",");
                                        arrindexb.append(arrIndex);
                                }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_15;
        }
        arrIndexEx = ArrayStatement();
if(arrindexb != null && !arrIndex.isEmpty())
                                        {
                                                arrindexb.append(",");
                                                arrindexb.append(arrIndexEx);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ValueBuilder = new StringBuilder();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          if (jj_2_9(2147483647)) {
            strValue = CallFuncStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[45] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
ValueBuilder.append(strValue);
                                                bWaitForCalculate = true;
                                                strValue = null;
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:{
            Value = jj_consume_token(TRUE);
            break;
            }
          case FALSE:{
            Value = jj_consume_token(FALSE);
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
ValueBuilder.append(Value.image);
                                                                Value = null;
                                                                bWaitForCalculate = false;
          label_16:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[47] = jj_gen;
              break label_16;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:{
              Value = jj_consume_token(TRUE);
              break;
              }
            case FALSE:{
              Value = jj_consume_token(FALSE);
              break;
              }
            default:
              jj_la1[48] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
if(Value.image != null && !Value.image.isEmpty())
                                                                {
                                                                        ValueBuilder.append(",");
                                                                        ValueBuilder.append(Value.image);
                                                                }
                                                                Value = null;
          }
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_10(2147483647)) {
          strValue = CallFuncStatement();
        } else if (jj_2_11(2147483647)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:{
            Value = jj_consume_token(TRUE);
            break;
            }
          case FALSE:{
            Value = jj_consume_token(FALSE);
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
ValueBuilder = new StringBuilder();
                        if(Value != null)
                        {
                                ValueBuilder.append(Value.image);
                                bWaitForCalculate = false;
                                Value = null;
                        }
                        else if(null != strValue)
                        {
                                ValueBuilder.append(strValue);
                                bWaitForCalculate = true;
                                strValue = null;
                        }
    }
String[] infor = new String[3];
                if(null != arrindexb)
                        infor[0] = arrindexb.toString();
                else
                        infor[0] = new String();

                //数组赋值
                if(ValueBuilder != null)
                        infor[1] = ValueBuilder.toString();
                else
                        infor[1] = new String();

                infor[2] = Boolean.toString(bWaitForCalculate);

                {if ("" != null) return infor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//double变量定义
  final public void DoubleVar() throws ParseException {/*@bgen(jjtree) DoubleVar */
        ASTDoubleVar jjtn000 = new ASTDoubleVar(JJTDOUBLEVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token dName;

        //[0]数组信息 [1]赋值信息
        String ArrayInfor[];
        StringBuilder infBuilder = null;

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(DOUBLE);
      //double数组
              dName = jj_consume_token(IDENTIFIER);
      ArrayInfor = DoubleDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(dName.image);
                if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                        infBuilder.append(ArrayInfor[0]);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                if(ArrayInfor[2].equalsIgnoreCase("true"))
                        jjtn000.addToVarName(infBuilder.toString(),true);
                else
                        jjtn000.addToVarName(infBuilder.toString(),false);
                dName = null;
                ArrayInfor = null;
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        dName = jj_consume_token(IDENTIFIER);
        ArrayInfor = DoubleDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(dName.image);
                        if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                                infBuilder.append(ArrayInfor[0]);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                        if(ArrayInfor[2].equalsIgnoreCase("true"))
                                jjtn000.addToVarName(infBuilder.toString(),true);
                        else
                                jjtn000.addToVarName(infBuilder.toString(),false);
                        dName = null;
                        ArrayInfor = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//double 声明体
//[0]数组信息 [1]赋值信息 [3]是否需要后续计算
  final public String[] DoubleDeclare() throws ParseException {//数组下表
        String arrIndex = new String(),arrIndexEx = new String();
        //赋值
        String strValue = null;
        Token Value = null;
        StringBuilder ValueBuilder = null;
        StringBuilder arrindexb = null;
        boolean bWaitForCalculate = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      arrIndex = ArrayStatement();
//数组下标
                                arrindexb = new StringBuilder();
                                if(arrIndex != null && !arrIndex.isEmpty())
                                {
                                        arrindexb.append(",");
                                        arrindexb.append(arrIndex);
                                }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          break label_18;
        }
        arrIndexEx = ArrayStatement();
if(arrindexb != null && !arrIndex.isEmpty())
                                        {
                                                arrindexb.append(",");
                                                arrindexb.append(arrIndexEx);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ValueBuilder = new StringBuilder();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          if (jj_2_12(2147483647)) {
            strValue = CallFuncStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[57] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
ValueBuilder.append(strValue);
                                                bWaitForCalculate = true;
                                                strValue = null;
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          Value = jj_consume_token(FLOATING_POINT_LITERAL);
ValueBuilder.append(Value.image);
                                                        Value = null;
                                                        bWaitForCalculate = false;
          label_19:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              break label_19;
            }
            jj_consume_token(COMMA);
            Value = jj_consume_token(FLOATING_POINT_LITERAL);
if(Value.image != null && !Value.image.isEmpty())
                                                                {
                                                                        ValueBuilder.append(",");
                                                                        ValueBuilder.append(Value.image);
                                                                }
                                                                Value = null;
          }
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_13(2147483647)) {
          Value = jj_consume_token(FLOATING_POINT_LITERAL);
        } else if (jj_2_14(2147483647)) {
          strValue = CallFuncStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
ValueBuilder = new StringBuilder();
                        if(Value != null)
                        {
                                ValueBuilder.append(Value.image);
                                bWaitForCalculate = false;
                                Value = null;
                        }
                        else if(null != strValue)
                        {
                                ValueBuilder.append(strValue);
                                bWaitForCalculate = true;
                                strValue = null;
                        }
    }
String[] infor = new String[3];
                if(null != arrindexb)
                        infor[0] = arrindexb.toString();
                else
                        infor[0] = new String();

                //数组赋值
                if(ValueBuilder != null)
                        infor[1] = ValueBuilder.toString();
                else
                        infor[1] = new String();

                infor[2] = Boolean.toString(bWaitForCalculate);

                {if ("" != null) return infor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//String变量定义
  final public void StringVar() throws ParseException {/*@bgen(jjtree) StringVar */
        ASTStringVar jjtn000 = new ASTStringVar(JJTSTRINGVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token intName;

        //[0]数组信息 [1]赋值信息
        String ArrayInfor[];
        StringBuilder infBuilder = null;

        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(STRING);
      //String数组
              intName = jj_consume_token(IDENTIFIER);
      ArrayInfor = StringDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(intName.image);
                if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                        infBuilder.append(ArrayInfor[0]);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                if(ArrayInfor[2].equalsIgnoreCase("true"))
                        jjtn000.addToVarName(infBuilder.toString(),true);
                else
                        jjtn000.addToVarName(infBuilder.toString(),false);
                intName = null;
                ArrayInfor = null;
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        intName = jj_consume_token(IDENTIFIER);
        ArrayInfor = StringDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(intName.image);
                        if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                                infBuilder.append(ArrayInfor[0]);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                        if(ArrayInfor[2].equalsIgnoreCase("true"))
                                jjtn000.addToVarName(infBuilder.toString(),true);
                        else
                                jjtn000.addToVarName(infBuilder.toString(),false);
                        intName = null;
                        ArrayInfor = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//String 声明体
//[0]数组信息 [1]赋值信息 [3]是否需要后续计算
  final public String[] StringDeclare() throws ParseException {//数组下表
        String arrIndex = new String(),arrIndexEx = new String();
        //赋值
        String strValue = null;
        Token Value = null;
        StringBuilder ValueBuilder = null;
        StringBuilder arrindexb = null;
        boolean bWaitForCalculate = false;
        String imValue = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      arrIndex = ArrayStatement();
//数组下标
                                arrindexb = new StringBuilder();
                                if(arrIndex != null && !arrIndex.isEmpty())
                                {
                                        arrindexb.append(",");
                                        arrindexb.append(arrIndex);
                                }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          break label_21;
        }
        arrIndexEx = ArrayStatement();
if(arrindexb != null && !arrIndex.isEmpty())
                                        {
                                                arrindexb.append(",");
                                                arrindexb.append(arrIndexEx);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ValueBuilder = new StringBuilder();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          if (jj_2_15(2147483647)) {
            strValue = CallFuncStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[66] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
ValueBuilder.append(strValue);
                                                bWaitForCalculate = true;
                                                strValue = null;
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          Value = jj_consume_token(STRING_LITERAL);
imValue = trimeDQM(Value.image);
                                                        ValueBuilder.append(imValue);
                                                        Value = null;
                                                        bWaitForCalculate = false;
          label_22:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[67] = jj_gen;
              break label_22;
            }
            jj_consume_token(COMMA);
            Value = jj_consume_token(STRING_LITERAL);
if(Value.image != null && !Value.image.isEmpty())
                                                                {
                                                                        imValue = trimeDQM(Value.image);
                                                                        ValueBuilder.append(",");
                                                                        ValueBuilder.append(imValue);
                                                                }
                                                                Value = null;
          }
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_16(2147483647)) {
          Value = jj_consume_token(STRING_LITERAL);
        } else if (jj_2_17(2147483647)) {
          strValue = CallFuncStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
ValueBuilder = new StringBuilder();
                        if(Value != null)
                        {
                                imValue = trimeDQM(Value.image);
                                ValueBuilder.append(imValue);
                                bWaitForCalculate = false;
                                Value = null;
                        }
                        else if(null != strValue)
                        {
                                ValueBuilder.append(strValue);
                                bWaitForCalculate = true;
                                strValue = null;
                        }
    }
String[] infor = new String[3];
                if(null != arrindexb)
                        infor[0] = arrindexb.toString();
                else
                        infor[0] = new String();

                //数组赋值
                if(ValueBuilder != null)
                        infor[1] = ValueBuilder.toString();
                else
                        infor[1] = new String();

                infor[2] = Boolean.toString(bWaitForCalculate);

                {if ("" != null) return infor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//对象变量定义
  final public void ObjectVar() throws ParseException {/*@bgen(jjtree) ObjectVar */
        ASTObjectVar jjtn000 = new ASTObjectVar(JJTOBJECTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token intName;

        //[0]数组信息 [1]赋值信息
        String ArrayInfor[];
        StringBuilder infBuilder = null;

        String strType = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strType = Name();
jjtn000.setStrType(strType);
      //对象数组
              intName = jj_consume_token(IDENTIFIER);
      ArrayInfor = ObjectDeclare();
//首先处理数组标示
                infBuilder = new StringBuilder();
                infBuilder.append(intName.image);
                if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                        infBuilder.append(ArrayInfor[0]);
                //添加到节点
                jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                if(ArrayInfor[2].equalsIgnoreCase("true"))
                        jjtn000.addToVarName(infBuilder.toString(),true);
                else
                        jjtn000.addToVarName(infBuilder.toString(),false);
                intName = null;
                ArrayInfor = null;
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        intName = jj_consume_token(IDENTIFIER);
        ArrayInfor = ObjectDeclare();
//首先处理数组标示
                        infBuilder = new StringBuilder();
                        infBuilder.append(intName.image);
                        if(ArrayInfor != null && ArrayInfor[0] != null && !ArrayInfor[0].isEmpty())
                                infBuilder.append(ArrayInfor[0]);
                        //添加到节点
                        jjtn000.AddIntItem(infBuilder.toString(),ArrayInfor[1]);
                        if(ArrayInfor[2].equalsIgnoreCase("true"))
                                jjtn000.addToVarName(infBuilder.toString(),true);
                        else
                                jjtn000.addToVarName(infBuilder.toString(),false);
                        ArrayInfor = null;
                        intName = null;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//对象 声明体
//[0]数组信息 [1]赋值信息 [3]是否需要后续计算
  final public String[] ObjectDeclare() throws ParseException {//数组下表
        String arrIndex = new String(),arrIndexEx = new String();
        //赋值
        String strValue = null;
        Token Value = null;
        StringBuilder ValueBuilder = null;
        StringBuilder arrindexb = null;
        boolean bWaitForCalculate = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      arrIndex = ArrayStatement();
//数组下标
                                arrindexb = new StringBuilder();
                                if(arrIndex != null && !arrIndex.isEmpty())
                                {
                                        arrindexb.append(",");
                                        arrindexb.append(arrIndex);
                                }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          break label_24;
        }
        arrIndexEx = ArrayStatement();
if(arrindexb != null && !arrIndex.isEmpty())
                                        {
                                                arrindexb.append(",");
                                                arrindexb.append(arrIndexEx);
                                        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
ValueBuilder = new StringBuilder();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          if (jj_2_18(2147483647)) {
            strValue = CallFuncStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case THIS:
            case LPAREN:
            case BANG:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = ConditionalExpression();
              break;
              }
            default:
              jj_la1[75] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
ValueBuilder.append(strValue);
                                                bWaitForCalculate = true;
                                                strValue = null;
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
          Value = jj_consume_token(IDENTIFIER);
ValueBuilder.append(Value.image);
                                                        Value = null;
                                                        bWaitForCalculate = false;
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[76] = jj_gen;
              break label_25;
            }
            jj_consume_token(COMMA);
            Value = jj_consume_token(IDENTIFIER);
if(Value.image != null && !Value.image.isEmpty())
                                                                {
                                                                        ValueBuilder.append(",");
                                                                        ValueBuilder.append(Value.image);
                                                                }
                                                                Value = null;
          }
          jj_consume_token(RBRACE);
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        if (jj_2_19(2147483647)) {
          strValue = CallFuncStatement();
        } else if (jj_2_20(2147483647)) {
          Value = jj_consume_token(IDENTIFIER);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case LPAREN:
          case BANG:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = ConditionalExpression();
            break;
            }
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
ValueBuilder = new StringBuilder();
                        if(Value != null)
                        {
                                ValueBuilder.append(Value.image);
                                bWaitForCalculate = false;
                                Value = null;
                        }
                        else if(null != strValue)
                        {
                                ValueBuilder.append(strValue);
                                bWaitForCalculate = true;
                                strValue = null;
                        }
    }
String[] infor = new String[3];
                if(null != arrindexb)
                        infor[0] = arrindexb.toString();
                else
                        infor[0] = new String();

                //数组赋值
                if(ValueBuilder != null)
                        infor[1] = ValueBuilder.toString();
                else
                        infor[1] = new String();

                infor[2] = Boolean.toString(bWaitForCalculate);

                {if ("" != null) return infor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//定义使用数据或规则语法--主体规则定义
/*---------------------------------------*/
  final public void FuncState(boolean bComple) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      DataDefine(bComple);
      break;
      }
    case FUNC:{
      FunLib(bComple);
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Data声明
  final public void DataDefine(boolean bComple) throws ParseException {/*@bgen(jjtree) DataDefine */
        ASTDataDefine jjtn000 = new ASTDataDefine(JJTDATADEFINE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token id;
        jjtn000.setParser(this);
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(DATA);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case STRING:
        case VECTOR:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          break label_26;
        }
        VarDeclaration(bComple);
      }
      jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrName(id.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//Rule定义
  final public void FunLib(boolean bComple) throws ParseException {/*@bgen(jjtree) FunLib */
        ASTFunLib jjtn000 = new ASTFunLib(JJTFUNLIB);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token id;
        jjtn000.setLogShow(logshow);
        DataTAB temp = this.func_Systab;
        jjtn000.setParser(this);
        jjtn000.setLogShow(logshow);
        func_Systab = jjtn000.setTabAndStackForFuncDef(this.g_Systab,this.sysStack,"FuncDef_Table",g_DataDefine);
        this.funDefineInfor = jjtn000.InitFuncForFuncDef(liborLoadFundef);
    try {
      jj_consume_token(FUNC);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case TRUE:
        case FALSE:
        case VOID:
        case STRING:
        case THIS:
        case VECTOR:
        case IF:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          break label_27;
        }
        if (jj_2_21(2147483647)) {
          FunctionDefine(bComple);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case DOUBLE:
          case INT:
          case CHAR:
          case TRUE:
          case FALSE:
          case STRING:
          case THIS:
          case VECTOR:
          case IF:
          case FOR:
          case WHILE:
          case BREAK:
          case CONTINUE:
          case RETURN:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            Statement(bComple);
            break;
            }
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrName(id.image);
                func_Systab = temp;
                funDefineInfor = null;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//由于函数声明和属性声明非常类似，这个为了区分两个不同
  final public void FunctionDeclarationLookahead() throws ParseException {
    ReturnType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

//函数语法定义
  final public void FunctionDefine(boolean bComple) throws ParseException {/*@bgen(jjtree) FunctionDefine */
        ASTFunctionDefine jjtn000 = new ASTFunctionDefine(JJTFUNCTIONDEFINE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strRt = new String();
        Token id = null;
        FuncParameter param = null;
        jjtn000.setParser(this);
        jjtn000.setLogShow(logshow);
        DataTAB temp = this.function_Systab;
        function_Systab = jjtn000.setTabAndStackForFunction(this.g_Systab,this.func_Systab,this.sysStack,"FuncBodyDef_Table",g_DataDefine);
        jjtn000.setFunc(funDefineInfor,liborLoadFundef);
    try {
      strRt = ReturnType();
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      param = ParamDefine();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case TRUE:
        case FALSE:
        case STRING:
        case THIS:
        case VECTOR:
        case IF:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_28;
        }
        Statement(bComple);
      }
      jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrReturnType(strRt);
                jjtn000.setFunParam(param);
                jjtn000.setStrFunName(id.image);
                this.function_Systab = temp;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*
 * 参数语法定义
 * 由于存在string，所以不允许char数组
 */
  final public FuncParameter ParamDefine() throws ParseException {Token paramtype = null,id = null;
        int count = 0;
        FuncParameter funcParam = new FuncParameter();
        Param parm = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case DOUBLE:
    case INT:
    case STRING:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        paramtype = jj_consume_token(BOOLEAN);
        break;
        }
      case DOUBLE:{
        paramtype = jj_consume_token(DOUBLE);
        break;
        }
      case INT:{
        paramtype = jj_consume_token(INT);
        break;
        }
      case STRING:{
        paramtype = jj_consume_token(STRING);
        break;
        }
      case IDENTIFIER:{
        paramtype = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id = jj_consume_token(IDENTIFIER);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          break label_29;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
count++;
      }
if(0 == count)
                                        parm = new Param(paramtype.image,id.image,false,0,"");
                                else
                                        parm = new Param(paramtype.image,id.image,true,count,"");
                                count =0;
                                funcParam.addParam(parm);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          break label_30;
        }
        jj_consume_token(COMMA);
paramtype = null;id = null;count = 0;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:{
          paramtype = jj_consume_token(BOOLEAN);
          break;
          }
        case DOUBLE:{
          paramtype = jj_consume_token(DOUBLE);
          break;
          }
        case INT:{
          paramtype = jj_consume_token(INT);
          break;
          }
        case STRING:{
          paramtype = jj_consume_token(STRING);
          break;
          }
        case IDENTIFIER:{
          paramtype = jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        id = jj_consume_token(IDENTIFIER);
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ;
            break;
            }
          default:
            jj_la1[91] = jj_gen;
            break label_31;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
count++;
        }
parm = null;
                                        if(0 == count)
                                                parm = new Param(paramtype.image,id.image,false,0,"");
                                        else
                                                parm = new Param(paramtype.image,id.image,true,count,"");
                                        count =0;
                                        funcParam.addParam(parm);
      }
      break;
      }
    case VOID:{
      paramtype = jj_consume_token(VOID);
      break;
      }
    case CHAR:{
      paramtype = jj_consume_token(CHAR);
      id = jj_consume_token(IDENTIFIER);
if(null != id)
                        {
                                if(0 == count)
                                        parm = new Param(paramtype.image,id.image,false,0,"");
                                else
                                        parm = new Param(paramtype.image,id.image,true,count,"");
                        }
                        else
                        {
                                if(0 == count)
                                        parm = new Param(paramtype.image,null,false,0,"");
                                else
                                        parm = new Param(paramtype.image,null,true,count,"");
                        }
                        count =0;
                        funcParam.addParam(parm);
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return funcParam;}
    throw new Error("Missing return statement in function");
  }

//定义函数返回类型语法
/*
 * 由于存在string，所以不允许char数组
 */
  final public String ReturnType() throws ParseException {Token type = null;
        String strType = new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      type = jj_consume_token(VOID);
      break;
      }
    case BOOLEAN:
    case DOUBLE:
    case INT:
    case CHAR:
    case STRING:
    case IDENTIFIER:{
      strType = Type();
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(type != null)
                        {if ("" != null) return type.image;}
                else
                        {if ("" != null) return strType;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//定义变量类型
/*---------------------------------------*/
  final public String Type() throws ParseException {String strValue = new String();
        StringBuilder typeBuilder  = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case DOUBLE:
    case INT:
    case CHAR:
    case STRING:{
      strValue = PrimitiveType();
      break;
      }
    case IDENTIFIER:{
      strValue = Name();
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
typeBuilder = new StringBuilder();
                                typeBuilder.append(strValue);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        break label_32;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
typeBuilder.append("[]");
    }
{if ("" != null) return typeBuilder.toString();}
    throw new Error("Missing return statement in function");
  }

//定义除char外的原始类型
  final public String PrimitiveType() throws ParseException {Token type = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      type = jj_consume_token(BOOLEAN);
      break;
      }
    case DOUBLE:{
      type = jj_consume_token(DOUBLE);
      break;
      }
    case INT:{
      type = jj_consume_token(INT);
      break;
      }
    case STRING:{
      type = jj_consume_token(STRING);
      break;
      }
    case CHAR:{
      type = jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type.image;}
    throw new Error("Missing return statement in function");
  }

//ValueLookahead
  final public void ValueLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECIMAL_LITERAL:{
      jj_consume_token(DECIMAL_LITERAL);
      break;
      }
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    case CHARACTER_LITERAL:{
      jj_consume_token(CHARACTER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//定义函数值语法
  final public String Value() throws ParseException {Token value = null;
        String strValue = new String();
        boolean bChar = false, bStr = false;
    if (jj_2_22(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        value = jj_consume_token(DECIMAL_LITERAL);
        break;
        }
      case INTEGER_LITERAL:{
        value = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        value = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
        }
      case CHARACTER_LITERAL:{
        value = jj_consume_token(CHARACTER_LITERAL);
bChar = true;
        break;
        }
      case STRING_LITERAL:{
        value = jj_consume_token(STRING_LITERAL);
bStr = true;
        break;
        }
      case TRUE:{
        value = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        value = jj_consume_token(FALSE);
        break;
        }
      case NULL:{
        value = jj_consume_token(NULL);
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case THIS:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case DECIMAL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        strValue = ConditionalExpression();
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if(value != null)
                {
                        if(bStr)
                                {if ("" != null) return trimeDQM(value.image);}
                        else if(bChar)
                                {if ("" != null) return trimeQM(value.image);}
                        else
                                {if ("" != null) return value.image;}
                }
                else
                        {if ("" != null) return strValue;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//流程控制定义部分
/*---------------------------------------*/
//定义if分支语法
  final public void IfStatement(boolean bComple) throws ParseException {/*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      IfConditionExpr();
      jj_consume_token(RPAREN);
      StatementClause(bComple);
      label_33:
      while (true) {
        if (jj_2_23(2147483647)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        IfConditionExpr();
        jj_consume_token(RPAREN);
        StatementClause(bComple);
      }
      if (jj_2_24(2147483647)) {
        jj_consume_token(ELSE);
        StatementClause(bComple);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//if statement
  final public void StatementClause(boolean bCompile) throws ParseException {/*@bgen(jjtree) StatementClause */
        ASTStatementClause jjtn000 = new ASTStatementClause(JJTSTATEMENTCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      if (jj_2_25(2147483647)) {
        jj_consume_token(LBRACE);
        label_34:
        while (true) {
          Statement(bCompile);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case DOUBLE:
          case INT:
          case CHAR:
          case TRUE:
          case FALSE:
          case STRING:
          case THIS:
          case VECTOR:
          case IF:
          case FOR:
          case WHILE:
          case BREAK:
          case CONTINUE:
          case RETURN:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[100] = jj_gen;
            break label_34;
          }
        }
        jj_consume_token(RBRACE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case DOUBLE:
        case INT:
        case CHAR:
        case TRUE:
        case FALSE:
        case STRING:
        case THIS:
        case VECTOR:
        case IF:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          Statement(bCompile);
          break;
          }
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//if ConditionExp
  final public void IfConditionExpr() throws ParseException {/*@bgen(jjtree) IfConditionExpr */
        ASTIfConditionExpr jjtn000 = new ASTIfConditionExpr(JJTIFCONDITIONEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      if (jj_2_26(2147483647)) {
        NotInorIn();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case LPAREN:
        case BANG:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          ConditionalExpression();
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//if Notin语法
  final public void NotInorIn() throws ParseException {/*@bgen(jjtree) NotInorIn */
        ASTNotInorIn jjtn000 = new ASTNotInorIn(JJTNOTINORIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token oper = null;
        String strLeft = new String();
        String strRight = new String();
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeft = Name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:{
        oper = jj_consume_token(IN);
        break;
        }
      case NOTIN:{
        oper = jj_consume_token(NOTIN);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      strRight = Name();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeft);
                jjtn000.strOpera(oper.image);
                jjtn000.setStrRightValue(strRight);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//定义for语句语法
  final public void ForStatement(boolean bComple) throws ParseException {/*@bgen(jjtree) ForStatement */
        ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Initor intiValue = null;
        OperationDef ofState = null;
        OperationDef StepOper = null;

        Token ofLeft = null, ofRight = null;
        Token stepid = null, stepop = null, stepvalue = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(FOR);
      if (jj_2_27(2147483647)) {
        jj_consume_token(LPAREN);
        ofLeft = jj_consume_token(IDENTIFIER);
        jj_consume_token(OF);
        ofRight = jj_consume_token(IDENTIFIER);
        jj_consume_token(RPAREN);
        StatementClause(bComple);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          intiValue = ForIniStat();
          jj_consume_token(SEMICOLON);
          ConditionalExpression();
          jj_consume_token(SEMICOLON);
          //终止条件
                                          stepid = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR:{
            stepop = jj_consume_token(INCR);
            break;
            }
          case DECR:{
            stepop = jj_consume_token(DECR);
            break;
            }
          case PLUSASSIGN:{
            stepop = jj_consume_token(PLUSASSIGN);
            stepvalue = jj_consume_token(DECIMAL_LITERAL);
            break;
            }
          case MINUSASSIGN:{
            stepop = jj_consume_token(MINUSASSIGN);
            stepvalue = jj_consume_token(DECIMAL_LITERAL);
            break;
            }
          default:
            jj_la1[104] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RPAREN);
          StatementClause(bComple);
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(ofLeft != null && ofRight != null)
                {
                        ofState = new OperationDef("of",ofLeft.image, ofRight.image);
                        jjtn000.setOfState(ofState);
                }
                else
                {
                        if(null != stepvalue)
                                StepOper = new OperationDef(stepop.image,stepid.image,stepvalue.image);
                        else
                                StepOper = new OperationDef(stepop.image,stepid.image,"");
                        jjtn000.setIntiValue(intiValue);
                        jjtn000.setStepOper(StepOper);
                }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//for语句条件初始化语句语法
  final public Initor ForIniStat() throws ParseException {Token type = null,id = null,number = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      type = jj_consume_token(INT);
      break;
      }
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        number = jj_consume_token(DECIMAL_LITERAL);
        break;
        }
      case INTEGER_LITERAL:{
        number = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[108] = jj_gen;
      ;
    }
Initor itor = new Initor(id.image,type.image,number.image);
                {if ("" != null) return itor;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//while循环语法定义
  final public void WhileStatement(boolean bComple) throws ParseException {/*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      ConditionalExpression();
      jj_consume_token(RPAREN);
      StatementClause(bComple);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//逻辑表达式语法定义
/*---------------------------------------*/
//从OR开始定义，OR优先级最低，优先级1
  final public String ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
        ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token oper = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = ConditionalAndExpression();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_OR:{
          ;
          break;
          }
        default:
          jj_la1[109] = jj_gen;
          break label_35;
        }
        oper = jj_consume_token(SC_OR);
        strRightValue = ConditionalAndExpression();
jjtn000.addStrRightValue(strRightValue);
                                if(oper != null)
                                        jjtn000.addStrOperator(oper.image);
                                oper = null;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);

                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//AND表达式，优先级2
  final public String ConditionalAndExpression() throws ParseException {/*@bgen(jjtree) ConditionalAndExpression */
        ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(JJTCONDITIONALANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token oper = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = EqualityExpression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_AND:{
          ;
          break;
          }
        default:
          jj_la1[110] = jj_gen;
          break label_36;
        }
        oper = jj_consume_token(SC_AND);
        strRightValue = EqualityExpression();
jjtn000.addStrRightValue(strRightValue);
                        if(oper != null)
                                jjtn000.addStrOperator(oper.image);
                        oper = null;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);

                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//==|!=表达式，优先级3
  final public String EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
        ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token Opera = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          Opera = jj_consume_token(EQ);
          break;
          }
        case NE:{
          Opera = jj_consume_token(NE);
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        strRightValue = RelationalExpression();
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);
                jjtn000.setStrRightValue(strRightValue);
                if(Opera != null)
                        jjtn000.strOpera(Opera.image);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//<|><=|>=表达式，优先级4
  final public String RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
        ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token Opera = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = AdditiveExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GT:{
          Opera = jj_consume_token(GT);
          break;
          }
        case LT:{
          Opera = jj_consume_token(LT);
          break;
          }
        case LE:{
          Opera = jj_consume_token(LE);
          break;
          }
        case GE:{
          Opera = jj_consume_token(GE);
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        strRightValue = AdditiveExpression();
        break;
        }
      default:
        jj_la1[114] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);
                jjtn000.setStrRightValue(strRightValue);
                if(Opera != null)
                        jjtn000.strOpera(Opera.image);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//+|-表达式，优先级5
  final public String AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
        ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token Opera = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = MultiplicativeExpression();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          break label_37;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          Opera = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          Opera = jj_consume_token(MINUS);
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        strRightValue = MultiplicativeExpression();
jjtn000.addStrRightValue(strRightValue);
                        if(Opera != null)
                                jjtn000.addStrOperator(Opera.image);
                        Opera = null;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//*//%表达式，优先级6
  final public String MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
        ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightValue = new String();
        Token Opera = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      strLeftValue = UnaryExpression();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:{
          ;
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          break label_38;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          Opera = jj_consume_token(STAR);
          break;
          }
        case SLASH:{
          Opera = jj_consume_token(SLASH);
          break;
          }
        case REM:{
          Opera = jj_consume_token(REM);
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        strRightValue = UnaryExpression();
jjtn000.addStrRightValue(strRightValue);
                        if(Opera != null)
                                jjtn000.addStrOperator(Opera.image);
                        Opera = null;
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrLeftValue(strLeftValue);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//单目操作表达式+|-|!，优先级7
  final public String UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token operat = null;
        String strValue = new String();
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          operat = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          operat = jj_consume_token(MINUS);
          break;
          }
        case BANG:{
          operat = jj_consume_token(BANG);
          break;
          }
        default:
          jj_la1[119] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        strValue = UnaryExpression();
        break;
        }
      case INCR:
      case DECR:{
        strValue = PrefixExpression();
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        if (jj_2_28(2147483647)) {
          strValue = CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            strValue = PostfixExpression();
            break;
            }
          case LPAREN:{
            jj_consume_token(LPAREN);
            strValue = ConditionalExpression();
            jj_consume_token(RPAREN);
            break;
            }
          default:
            jj_la1[121] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(operat != null)
                        jjtn000.setStrOper(operat.image);
                jjtn000.setStrValue(strValue);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//前++|--单目表达式，优先级8
  final public String PrefixExpression() throws ParseException {/*@bgen(jjtree) PrefixExpression */
        ASTPrefixExpression jjtn000 = new ASTPrefixExpression(JJTPREFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token operat = null;
        String strValue = new String();
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        operat = jj_consume_token(INCR);
        break;
        }
      case DECR:{
        operat = jj_consume_token(DECR);
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      strValue = PrimaryExpression();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(operat != null)
                        jjtn000.setStrOper(operat.image);
                jjtn000.setStrValue(strValue);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//强制转换，优先级8
  final public String CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */
        ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strType = new String();
        String strValue = new String();
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(LPAREN);
      strType = PrimitiveType();
      jj_consume_token(RPAREN);
      strValue = PostfixExpression();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrType(strType);
                jjtn000.setStrValue(strValue);
                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//后++|--单目表达式，优先级9
  final public String PostfixExpression() throws ParseException {/*@bgen(jjtree) PostfixExpression */
        ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token operat = null,identi = null,This = null;
        String strValue = new String();

        //[0]数组名 [1]下标名 [2]变量名
        String[] arrayItem = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
        boolean[] bValueSimple = new boolean[1];
    try {
      if (jj_2_29(2147483647)) {
        This = jj_consume_token(THIS);
        jj_consume_token(DOT);
        identi = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          operat = jj_consume_token(INCR);
          break;
          }
        case DECR:{
          operat = jj_consume_token(DECR);
          break;
          }
        default:
          jj_la1[123] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THIS:{
          This = jj_consume_token(THIS);
          jj_consume_token(DOT);
          identi = jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_la1[125] = jj_gen;
          if (jj_2_30(2147483647)) {
            strValue = Name();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INCR:{
              operat = jj_consume_token(INCR);
              break;
              }
            case DECR:{
              operat = jj_consume_token(DECR);
              break;
              }
            default:
              jj_la1[124] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else if (jj_2_31(2147483647)) {
            strValue = CallFuncStatement();
jjtn000.setWaitForChild(true);
          } else if (jj_2_32(2147483647)) {
            arrayItem = ArrayItem();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:
            case FALSE:
            case DECIMAL_LITERAL:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:{
              strValue = SimpleExpress(bValueSimple);
              break;
              }
            default:
              jj_la1[126] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setValueNotCalc(bValueSimple[0]);
                if(operat != null)
                        jjtn000.setStrOper(operat.image);

                if(arrayItem != null)
                {
                        //[0]数组名 [1]下标名 [2]变量名 oper下标，left数组名,right变量名
                        OperationDef aItem = new OperationDef(arrayItem[1],arrayItem[0],arrayItem[2]);
                        jjtn000.setArrayItem(aItem);
                }
                else if(identi != null)
                        jjtn000.setStrValue(FuncConst.THIS + FuncConst.DOT + identi.image);
                else
                        jjtn000.setStrValue(strValue);

                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//SimpleExpress
  final public String SimpleExpress(boolean[] bValueSimple) throws ParseException {Token value = null;
        String strValue = new String();
        boolean bChar = false, bStr = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      strValue = Name();
      break;
      }
    case TRUE:{
      value = jj_consume_token(TRUE);
bValueSimple[0] = true;
      break;
      }
    case FALSE:{
      value = jj_consume_token(FALSE);
bValueSimple[0] = true;
      break;
      }
    case DECIMAL_LITERAL:{
      value = jj_consume_token(DECIMAL_LITERAL);
bValueSimple[0] = true;
      break;
      }
    case INTEGER_LITERAL:{
      value = jj_consume_token(INTEGER_LITERAL);
bValueSimple[0] = true;
      break;
      }
    case STRING_LITERAL:{
      value = jj_consume_token(STRING_LITERAL);
bValueSimple[0] = true;
                        bStr = true;
      break;
      }
    case CHARACTER_LITERAL:{
      value = jj_consume_token(CHARACTER_LITERAL);
bValueSimple[0] = true;
                        bChar = true;
      break;
      }
    case FLOATING_POINT_LITERAL:{
      value = jj_consume_token(FLOATING_POINT_LITERAL);
bValueSimple[0] = true;
      break;
      }
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(value != null)
                {
                        if(bChar)
                                {if ("" != null) return trimeQM(value.image);}
                        else if(bStr)
                                {if ("" != null) return trimeDQM(value.image);}
                        else
                                {if ("" != null) return value.image;}
                }
                else
                        {if ("" != null) return strValue;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------*/
//语句语法定义
/*---------------------------------------*/
// 语句定义
  final public void Statement(boolean bComple) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      BigStatmentBlock(bComple);
      break;
      }
    case LPAREN:{
      LitBlock(bComple);
      break;
      }
    case SEMICOLON:{
      EmptyStatement();
      break;
      }
    default:
      jj_la1[128] = jj_gen;
      if (jj_2_33(2147483647)) {
        VarDeclaration(bComple);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case INCR:
        case DECR:
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:{
          StatementExpression();
          break;
          }
        case BREAK:{
          BreakStatement();
          break;
          }
        case CONTINUE:{
          ContinueStatement();
          break;
          }
        case RETURN:{
          ReturnStatement();
          break;
          }
        case IF:{
          IfStatement(bComple);
          break;
          }
        case FOR:{
          ForStatement(bComple);
          break;
          }
        case WHILE:{
          WhileStatement(bComple);
          break;
          }
        default:
          jj_la1[129] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//{}Block语句
  final public void BigStatmentBlock(boolean bComple) throws ParseException {
    if (jj_2_34(2147483647)) {
      jj_consume_token(LBRACE);
      Statement(bComple);
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        Statement(bComple);
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//()Block语句
  final public void LitBlock(boolean bComple) throws ParseException {
    jj_consume_token(LPAREN);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case DOUBLE:
      case INT:
      case CHAR:
      case TRUE:
      case FALSE:
      case STRING:
      case THIS:
      case VECTOR:
      case IF:
      case FOR:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case DECIMAL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        break label_39;
      }
      Statement(bComple);
    }
    jj_consume_token(RPAREN);
  }

//空语句使用必须添加;比如{;}
  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

//语句中可能存在的表达式
  final public void StatementExpression() throws ParseException {/*@bgen(jjtree) StatementExpression */
        ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strLeftValue = new String();
        String strRightVlaue = new String();
        String strOper = new String();
        //[0]数组名 [1]下标名 [2]变量名
        String[] strArray = new String[3];
        boolean bArray = false;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:
      case DECR:{
        PrefixExpression();
        jj_consume_token(SEMICOLON);
jjtn000.setPopNeed(true);
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        if (jj_2_35(2147483647)) {
          strLeftValue = PrimaryExpression();
          strOper = AssignmentOperator();
          strRightVlaue = ConditionalExpression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_36(2147483647)) {
          strArray = ArrayItem();
          strOper = AssignmentOperator();
          strRightVlaue = ConditionalExpression();
          jj_consume_token(SEMICOLON);
bArray = true;
        } else if (jj_2_37(2147483647)) {
          CallFuncStatement();
          jj_consume_token(SEMICOLON);
jjtn000.setPopNeed(true);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case DECIMAL_LITERAL:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:{
            PostfixExpression();
            jj_consume_token(SEMICOLON);
jjtn000.setPopNeed(true);
            break;
            }
          default:
            jj_la1[133] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(bArray)
                        jjtn000.setStrArrayItem(strArray);
                else
                        jjtn000.setStrLeftValue(strLeftValue);
                jjtn000.setStrRightVlaue(strRightVlaue);
                jjtn000.setStrOper(strOper);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//调用函数语句
  final public void ArrayItemLookAhead() throws ParseException {
    Name();
    jj_consume_token(LBRACKET);
  }

//数组项
//[0]数组名 [1]下标名 [2]变量名
  final public String[] ArrayItem() throws ParseException {String strName = null, ident = null;
        Token number = null, index = null,operat = null;
        StringBuilder strNumbers = new StringBuilder();
        StringBuilder strNemIndex = new StringBuilder();
    strName = Name();
    label_40:
    while (true) {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        number = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          operat = jj_consume_token(INCR);
          break;
          }
        case DECR:{
          operat = jj_consume_token(DECR);
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if(strNumbers.length() != 0)
                                                strNumbers.append(",");
                                        strNumbers.append(number.image);
                                        if(null != operat)
                                                strNumbers.append(operat.image);
        break;
        }
      case INCR:
      case DECR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          operat = jj_consume_token(INCR);
          break;
          }
        case DECR:{
          operat = jj_consume_token(DECR);
          break;
          }
        default:
          jj_la1[135] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        number = jj_consume_token(IDENTIFIER);
if(strNumbers.length() != 0)
                                                strNumbers.append(",");
                                        if(null != operat)
                                                strNumbers.append(operat.image);
                                        strNumbers.append(number.image);
        break;
        }
      case DECIMAL_LITERAL:
      case INTEGER_LITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:{
          number = jj_consume_token(INTEGER_LITERAL);
          break;
          }
        case DECIMAL_LITERAL:{
          number = jj_consume_token(DECIMAL_LITERAL);
          break;
          }
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if(strNumbers.length() != 0)
                                                strNumbers.append(",");
                                        strNumbers.append(number.image);
        break;
        }
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        break label_40;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      ident = Name();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          jj_la1[139] = jj_gen;
          break label_41;
        }
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          index = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR:{
            operat = jj_consume_token(INCR);
            break;
            }
          case DECR:{
            operat = jj_consume_token(DECR);
            break;
            }
          default:
            jj_la1[140] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
strNemIndex.append(",");
                                                if(null != index)
                                                        strNemIndex.append(index.image);
                                                if(null != operat)
                                                        strNemIndex.append(operat.image);
                                                index = null;
                                                operat = null;
          break;
          }
        case INCR:
        case DECR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR:{
            operat = jj_consume_token(INCR);
            break;
            }
          case DECR:{
            operat = jj_consume_token(DECR);
            break;
            }
          default:
            jj_la1[141] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          index = jj_consume_token(IDENTIFIER);
strNemIndex.append(",");
                                                if(null != operat)
                                                        strNemIndex.append(operat.image);
                                                if(null != index)
                                                        strNemIndex.append(index.image);
                                                index = null;
                                                operat = null;
          break;
          }
        case DECIMAL_LITERAL:
        case INTEGER_LITERAL:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            index = jj_consume_token(INTEGER_LITERAL);
            break;
            }
          case DECIMAL_LITERAL:{
            index = jj_consume_token(DECIMAL_LITERAL);
            break;
            }
          default:
            jj_la1[142] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
strNemIndex.append(",");
                                                if(null != index)
                                                        strNemIndex.append(index.image);
                                                index = null;
                                                operat = null;
          break;
          }
        default:
          jj_la1[143] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBRACKET);
      }
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      ;
    }
String[] result = new String[3];
                result[0] = strName;
                result[1] = strNumbers.toString();
                if(ident != null)
                        result[2] = ident + strNemIndex.toString();
                else
                        result[2] = null;

                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

//调用函数语句
  final public void CallFuncLookAhead() throws ParseException {
    Name();
    jj_consume_token(LPAREN);
  }

//方法调用
  final public String CallFuncStatement() throws ParseException {/*@bgen(jjtree) CallFuncStatement */
        ASTCallFuncStatement jjtn000 = new ASTCallFuncStatement(JJTCALLFUNCSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String funname = new String(), strValue = new String();
        StringBuilder valueBuilder = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
        jjtn000.setFunc(funDefineInfor,liborLoadFundef);
        int paracount = 0;
    try {
      if (jj_2_38(2147483647)) {
        funname = Name();
        jj_consume_token(LPAREN);
        strValue = Value();
valueBuilder = new StringBuilder();
                                        if(null != strValue)
                                                valueBuilder.append(strValue);
                                        else
                                                valueBuilder.append("");
                                        strValue = null;
                                        paracount++;
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[145] = jj_gen;
            break label_42;
          }
          jj_consume_token(COMMA);
          strValue = Value();
valueBuilder.append(",");
                                                if(null != strValue)
                                                        valueBuilder.append(strValue);
                                                else
                                                        valueBuilder.append("");
                                                paracount++;
                                                strValue = null;
        }
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          funname = Name();
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStrFunName(funname);
                if(valueBuilder != null)
                        jjtn000.setStrParam(valueBuilder.toString());
                jjtn000.setParaCount(paracount);

                {if ("" != null) return "";}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

//原子表达式this.|(expression)|obj.，优先级10
  final public String PrimaryExpression() throws ParseException {Token ident = null;
        String strValue = new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THIS:{
      jj_consume_token(THIS);
      jj_consume_token(DOT);
      ident = jj_consume_token(IDENTIFIER);
StringBuilder bd = new StringBuilder();
                        bd.append(FuncConst.THIS + FuncConst.DOT);
                        bd.append(ident.image);
                        strValue = bd.toString();
      break;
      }
    case IDENTIFIER:{
      strValue = Name();
      break;
      }
    default:
      jj_la1[147] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return strValue;}
    throw new Error("Missing return statement in function");
  }

//仅为去除赋值冲突时
  final public void AssignmentLookAhead() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      break;
      }
    case STARASSIGN:{
      jj_consume_token(STARASSIGN);
      break;
      }
    case REMASSIGN:{
      jj_consume_token(REMASSIGN);
      break;
      }
    case SLASHASSIGN:{
      jj_consume_token(SLASHASSIGN);
      break;
      }
    case PLUSASSIGN:{
      jj_consume_token(PLUSASSIGN);
      break;
      }
    case MINUSASSIGN:{
      jj_consume_token(MINUSASSIGN);
      break;
      }
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//赋值关键字
  final public String AssignmentOperator() throws ParseException {Token oper;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      oper = jj_consume_token(ASSIGN);
      break;
      }
    case STARASSIGN:{
      oper = jj_consume_token(STARASSIGN);
      break;
      }
    case REMASSIGN:{
      oper = jj_consume_token(REMASSIGN);
      break;
      }
    case SLASHASSIGN:{
      oper = jj_consume_token(SLASHASSIGN);
      break;
      }
    case PLUSASSIGN:{
      oper = jj_consume_token(PLUSASSIGN);
      break;
      }
    case MINUSASSIGN:{
      oper = jj_consume_token(MINUSASSIGN);
      break;
      }
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return oper.image;}
    throw new Error("Missing return statement in function");
  }

//break语句
  final public void BreakStatement() throws ParseException {/*@bgen(jjtree) BreakStatement */
        ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//continue语句
  final public void ContinueStatement() throws ParseException {/*@bgen(jjtree) ContinueStatement */
        ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

//return语句
  final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strValue = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case THIS:
      case NULL:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case DECIMAL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        strValue = Value();
        break;
        }
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(strValue != null)
                        jjtn000.setStrValue(strValue);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/*---------------------------------------*/
//回复客户调用
/*---------------------------------------*/
//return语句
  final public void Return2Client() throws ParseException {/*@bgen(jjtree) Return2Client */
        ASTReturn2Client jjtn000 = new ASTReturn2Client(JJTRETURN2CLIENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String strValue = null;
        jjtn000.setLogShow(logshow);
        jjtn000.setTabAndStack(this.g_Systab,this.func_Systab,this.function_Systab,this.sysStack,g_DataDefine);
    try {
      jj_consume_token(RETURNTOC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case THIS:
      case NULL:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case DECIMAL_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:{
        strValue = Value();
        break;
        }
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
if(strValue != null)
                        jjtn000.setStrValue(strValue);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  void error_skipto(int Tokenkind,int end, String preinfor) throws ParseException {/*@bgen(jjtree) error_skipto */
     ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     jjtn000.jjtSetFirstToken(getToken(1));
     try {// generate the exception object.
        ParseException e = generateParseException();
        StringBuilder inforb = new StringBuilder();
        inforb.append(preinfor);
        inforb.append(e.toString());
        System.out.println("\u005cn<------HyRule Exception catched------> ");
        System.out.println(inforb.toString());

        Token t;
        do
        {
                t = getNextToken();
        }
        while (t.kind != Tokenkind && t.kind != end);
        System.out.println("<------HyRule Exception finish------> ");/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_123()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_122()) return true;
    if (jj_3R_121()) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_69()) return true;
    if (jj_3R_121()) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_120()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_250()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_255()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_220()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_256()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_3R_239()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_242()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_254()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  private boolean jj_3R_236()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_159()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_247()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3R_226()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_252()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_262()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_245()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_223()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_253()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_261()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_260()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_259()
 {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_258()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_257()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(VECTOR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_240()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3R_251()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_207()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_3R_240()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_206()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_217()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(MINUSASSIGN)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_3R_183()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    if (jj_3R_148()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_249()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(PLUSASSIGN)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_124()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HySoftTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[152];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x26000,0x26000,0x0,0x28000,0x28000,0x10001,0x1,0x0,0x123e6000,0x123e6000,0x6000,0x6000,0x0,0x56fe6000,0x56fe6000,0x0,0x0,0x6000,0x6000,0x0,0x0,0x123c0000,0x123c0000,0x0,0x4c00000,0x0,0x0,0x0,0x4c00000,0x0,0x0,0x0,0x4c00000,0x0,0x0,0x4c00000,0x0,0x0,0x4c00000,0x0,0x0,0x4c00000,0x0,0x0,0x0,0x4c00000,0xc00000,0x0,0xc00000,0x4c00000,0x0,0xc00000,0x4c00000,0x0,0x0,0x0,0x0,0x4c00000,0x0,0x4c00000,0x0,0x4c00000,0x0,0x0,0x0,0x0,0x4c00000,0x0,0x4c00000,0x0,0x4c00000,0x0,0x0,0x0,0x0,0x4c00000,0x0,0x4c00000,0x0,0x4c00000,0x0,0x0,0x0,0x123c0000,0x57fc0000,0x56fc0000,0x56fc0000,0x21c0000,0x0,0x0,0x21c0000,0x0,0x33c0000,0x33c0000,0x23c0000,0x0,0x23c0000,0x20c00000,0x20c00000,0x4c00000,0x56fc0000,0x56fc0000,0x4c00000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4c00000,0x0,0x0,0x0,0x4000000,0xc00000,0xc00000,0x0,0x44c00000,0x0,0x56fc0000,0x0,0x4c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x24c00000,0x24c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2200,0x0,0x0,0x0,0x0,0x1000,0xc00,0xc00,0x0,0x0,0x0,0x228cf1,0x228cf1,0x100,0x4000,0x0,0x0,0x800000,0x400000,0x0,0x0,0x400000,0x8008000,0x1000000,0x400000,0x80000,0x8008000,0x0,0x400000,0x0,0x8028000,0x1000000,0x0,0x8008000,0x1000000,0x80000,0x8008000,0x1000000,0x400000,0x8008000,0x1000000,0x400000,0x80000,0x8008000,0x0,0x400000,0x0,0x8028000,0x1000000,0x0,0x8008000,0x1000000,0x80000,0x400000,0x80000,0x8008000,0x400000,0x8028000,0x1000000,0x8008000,0x1000000,0x80000,0x400000,0x80000,0x8008000,0x400000,0x8028000,0x1000000,0x8008000,0x1000000,0x80000,0x400000,0x80000,0x8008000,0x400000,0x8028000,0x1000000,0x8008000,0x1000000,0x80000,0xc00,0x0,0x2280f1,0x2280f1,0x2280f1,0x0,0x80000,0x400000,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x8008000,0x2280f1,0x2280f1,0x8008000,0xc,0x0,0x8000,0x0,0x0,0x1000000,0x0,0x0,0x90000000,0x90000000,0x66000000,0x66000000,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x228000,0xf1,0x20000,0x2280f1,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x800000,0x400000,0x0,0x0,0x1000000,0x1000000,0x8008000,0x8008000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x400000,0x74c00c,0x74c00c,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x74c03c,0x0,0x0,0x0,0x74c03c,0xc000,0x0,0xc000,0x74c03c,0x0,0xc000,0x74c03c,0x0,0x0,0x74c03c,0x0,0x0,0x74c03c,0x0,0x0,0x0,0x74c03c,0x0,0x0,0x0,0x74c03c,0x0,0x0,0x74c03c,0x0,0x0,0x0,0x0,0x74c03c,0x0,0x74c03c,0x0,0x74c03c,0x0,0x0,0x0,0x0,0x74c03c,0x0,0x74c03c,0x0,0x74c03c,0x0,0x0,0x0,0x0,0x74c03c,0x0,0x74c03c,0x0,0x74c03c,0x0,0x0,0x0,0x400000,0x74c00c,0x74c00c,0x74c00c,0x400000,0x0,0x0,0x400000,0x0,0x400000,0x400000,0x400000,0x0,0x0,0x34c000,0x34c000,0x74c03c,0x74c00c,0x74c00c,0x74c03c,0x0,0x60c,0x0,0x0,0xc000,0x0,0x1,0x2,0x0,0x0,0x0,0x0,0x30,0x30,0x1c0,0x1c0,0x30,0x3c,0x74c000,0xc,0xc,0xc,0x0,0x74c000,0x74c000,0x0,0x74c00c,0x0,0x74c00c,0xc,0x74c000,0xc,0xc,0xc000,0x40c00c,0x0,0x0,0xc,0xc,0xc000,0x40c00c,0x0,0x0,0x400000,0x400000,0x3e00,0x3e00,0x74c03c,0x74c03c,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[38];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HySoft(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HySoft(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HySoftTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HySoft(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new HySoftTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HySoft(HySoftTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HySoftTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 152; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[89];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 152; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 89; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 38; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
