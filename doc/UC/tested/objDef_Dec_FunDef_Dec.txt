hy_debug on;
//hy_show mems;
hy_debug runon; 
hy_show tabs;
hy_set log off;
hy_set loglv debug;
load Mobile_data, Mobile_simple
/*String 操作需要定义 temp[t++].mk[t++]*/
{
	string temstr, customer1 = "Mobile", customer2 = "unit", custmer3[2][2][3] = {"xhc","chi"};
	int tmpvalue = 0, dm = 2, tmp[2][3][3] = {1,3,4},customer2;
	char tc='a',ta;
	bool ba=true,bc,bd[2][2][4]={true,false};
	double da=0.3,db,dc[2][2][3]={0.2,0.3};
	object oa=a,ob,oc[2][2][3]={a,b};

	string temp[2] = {"1","2"}, teststr[2][2];
	temp[1] = "xzy";
	temp[0] = "0xzy";
	teststr[0][1] = "teststr";
	teststr[1][0] = "tttdd;";
	bool btt = true,ttResult = (btt && true);
	data tmp
	{
		int i = 10;
		int t = 1;
		bool i = true;
	}
	tmp tp;
	
	//用户定义
	data User
	{
		string strname = "user";	
		string brand = "brand";		//用户品牌 VIP，一般
		string fam[2][2] = {"fam1","fam2"};
		int time = 0;
		tmp ta = tp;
		object a;
	}
	
	User user1,u2[2],u3[2][2] = {user1},ua=user1;
	user1.strname = "usr1";
	user1.fam[1][0] = "user1Fam";
	temstr = "temstr";
	user1.ta.i = 110;
	u2[1].strname = "usru21";
	u2[1].brand = "u21.brand";
	u2[3].brand = "now1";
	u2[1].fam[1][0] = "u21fam1.0";
	u2[1].ta.i = 150;
	u3[1][1].strname = "usr3";
	
	u2[0] = u2[1][2].m[1];
	u2[0].brand = user1.strname;
	u2[0].strname = u2[1].strname;
	u2[0].fam[1][1] = u2[1].fam[1][0];
	u3[1][1].fam[1][1] = user1.strname;
	u3[1][1].fam[1][4] = user1.strname;
	ua=user1;
	user1.strname = "testuser1";
	ua.ta.i=user1.ta.i++;
	user1.ta.i = 500;
	
	funlib func_Test
	{
		int option[10] = {1,2,3,4,12,20,7,8,9,10};
		
		//移动用户以下直接返回选项，联通的返回选项*2，
		int level = 5;
		this.level++;
		User u1,u2;
		u1.strname = "xz";
		u1.brand = "g";
		int tempLim = ++u1.ta.i;
		int mk = level + 5;
		User uarray[2] = {u1,u2};
		
		int testInt(int tInt)
		{
			int t = 0;
			if((t + 1 -2 + 3) > 4)
				return t;
			if((t * 2 /3 *5) > 4)
				return t;
			
			return tInt;
		}
		bool testBool(void)
		{
			return true;
		}
		int[] funct(string name, int level)
		{
			int result[10] = {30,40,50,60,70,80,90};
			int index = 0;
			result[index++] = 10;
			User u1;
			u1.brand = "gg";
			u1.time = 3;
			
			if(level !in option)
				level = 3;
			else if(u1.strname == "xz")
				level = 4;
			else if(u1.brand == "g")
				return 4;
			else
				level++;
				//return null;
			
			for(one of option)
			{
				if(name == "xhc")
				{
					if(one < level)
						result[index++] = one;
					else
						break;
				}
			}
			for(int t = 1; t < u1.time; t++)
				level++;
			
			while(index == 1 || level < 12)
			{
				level++;
				index++;
			}
			
			double d = 11.34;
			int limit = (int)d;
			++limit;
			string tmpname = "yestest";
			int tmpli = (int)tmpname;
			tmpli = (int)d;
			while(index == 1 && level < (int)d)
			{
				if(level == 9)
					continue;
				level++;
			}
			
			return result;
		}
	}
	
	func_Test.testInt(12);
	string customer1 = "xhc";
	this.customer1 = "xhc";
	int ttk = 0;
	this.ttk++;
	--this.ttk;
	bool resul = func_Test.testBool();
	int tempRes = func_Test.testInt(8);
	int retInt[10] = func_Test.funct(customer1,8);
	toClient: retInt;
}
end;


